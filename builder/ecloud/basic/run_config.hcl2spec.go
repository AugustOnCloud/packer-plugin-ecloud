// Code generated by "packer-sdc mapstructure-to-hcl2"; DO NOT EDIT.

package basic

import (
	"github.com/hashicorp/hcl/v2/hcldec"
	"github.com/zclconf/go-cty/cty"
)

// FlatecloudDataVolumn is an auto-generated flat version of ecloudDataVolumn.
// Where the contents of a field with a `mapstructure:,squash` tag are bubbled up.
type FlatecloudDataVolumn struct {
	IsShare      *bool   `mapstructure:"is_share" cty:"is_share" hcl:"is_share"`
	ResourceType *string `mapstructure:"resource_type" cty:"resource_type" hcl:"resource_type"`
	Size         *int32  `mapstructure:"size" cty:"size" hcl:"size"`
}

// FlatMapstructure returns a new FlatecloudDataVolumn.
// FlatecloudDataVolumn is an auto-generated flat version of ecloudDataVolumn.
// Where the contents a fields with a `mapstructure:,squash` tag are bubbled up.
func (*ecloudDataVolumn) FlatMapstructure() interface{ HCL2Spec() map[string]hcldec.Spec } {
	return new(FlatecloudDataVolumn)
}

// HCL2Spec returns the hcl spec of a ecloudDataVolumn.
// This spec is used by HCL to read the fields of ecloudDataVolumn.
// The decoded values from this spec will then be applied to a FlatecloudDataVolumn.
func (*FlatecloudDataVolumn) HCL2Spec() map[string]hcldec.Spec {
	s := map[string]hcldec.Spec{
		"is_share":      &hcldec.AttrSpec{Name: "is_share", Type: cty.Bool, Required: false},
		"resource_type": &hcldec.AttrSpec{Name: "resource_type", Type: cty.String, Required: false},
		"size":          &hcldec.AttrSpec{Name: "size", Type: cty.Number, Required: false},
	}
	return s
}
